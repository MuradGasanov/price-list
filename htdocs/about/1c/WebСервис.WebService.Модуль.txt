Функция НДС(ТипНдс)
	Если ТипНдс = Перечисления.СтавкиНДС.НДС10 Тогда
		Возврат 10;
	ИначеЕсли ТипНдс = Перечисления.СтавкиНДС.НДС18 Тогда
		Возврат 18;
	КонецЕсли;
	Возврат 0;
КонецФункции

Функция getPrice(clientCode)
	// получим типы из XDTO
	ТипXDTOСтрокаПрайс = ФабрикаXDTO.Тип("http://www.sample-package.org", "priceItem");
	ТипXDTOПрайс = ФабрикаXDTO.Тип("http://www.sample-package.org", "price");
	//создадим значение XDTO для свойства
	XDTOПрайс = ФабрикаXDTO.Создать(ТипXDTOПрайс);
	
	ПроцентСкидки = Неопределено;
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(clientCode);
	Если Контрагент <> Справочники.Контрагенты.ПустаяСсылка() Тогда
		ЭлектронКлиент = Справочники.ЭлектронКлиенты.НайтиПоРеквизиту("Клиент", Контрагент);
		Если ЭлектронКлиент <> Справочники.ЭлектронКлиенты.ПустаяСсылка() Тогда
			ПроцентСкидки = ЭлектронКлиент.Скидка.Скидка/100;
		КонецЕсли;
	КонецЕсли;
	Если ПроцентСкидки = Неопределено Тогда
		Возврат "Клиент не найден"
	КонецЕсли;
	
	Запрос = Новый Запрос; //Запрос остатков номенклатуры
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура.Код КАК id,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Наименование, """") КАК name,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Производитель.Наименование, """") КАК manufacture,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.жвл, ЛОЖЬ) КАК GVL,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.РЦена, 0) КАК registryPrice,
		|	ЕСТЬNULL(ТоварыНаСкладахОстатки.Номенклатура.Срок, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК expirationDate,
		|	ТоварыНаСкладахОстатки.Номенклатура.СтавкаНДС КАК NDS,
		|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена - ЦеныНоменклатурыСрезПоследних.Цена * &ПроцентСкидки КАК ЧИСЛО(15, 2)) КАК price,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК balanse,
		|	0 КАК orderCount,
		|	0 КАК orderSum
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ТоварыНаСкладахОстатки.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.ТипЦен = &Предоплата
		|	И ТоварыНаСкладахОстатки.КоличествоОстаток > 0
		|ИТОГИ ПО
		|	ОБЩИЕ
		|АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("Предоплата", Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("000000002"));
	Запрос.УстановитьПараметр("Склад", Справочники.Склады.НайтиПоКоду("000000001"));
	Запрос.УстановитьПараметр("ПроцентСкидки", ПроцентСкидки);

	Результат = Запрос.Выполнить();

	ВыборкаОбщийИтог = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	ВыборкаОбщийИтог.Следующий();		// Общий итог

	ВыборкаДетальныеЗаписи = ВыборкаОбщийИтог.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		XDTOСтрокаПрайс = ФабрикаXDTO.Создать(ТипXDTOСтрокаПрайс);
		
		// заполним результат
		XDTOСтрокаПрайс.id = ВыборкаДетальныеЗаписи.id;
		XDTOСтрокаПрайс.name = ВыборкаДетальныеЗаписи.name;
		XDTOСтрокаПрайс.manufacture = ВыборкаДетальныеЗаписи.manufacture;
		XDTOСтрокаПрайс.price = ВыборкаДетальныеЗаписи.price;
		XDTOСтрокаПрайс.expirationDate = ВыборкаДетальныеЗаписи.expirationDate;
		XDTOСтрокаПрайс.balanse = ВыборкаДетальныеЗаписи.balanse;
		XDTOСтрокаПрайс.GVL = ВыборкаДетальныеЗаписи.GVL;
		XDTOСтрокаПрайс.registryPrice = ВыборкаДетальныеЗаписи.registryPrice;
		XDTOСтрокаПрайс.NDS = НДС(ВыборкаДетальныеЗаписи.NDS);
		XDTOСтрокаПрайс.orderCount = ВыборкаДетальныеЗаписи.orderCount;
		XDTOСтрокаПрайс.orderSum = ВыборкаДетальныеЗаписи.orderSum;
		
		// добавим результат в товары
		XDTOПрайс.price.Добавить(XDTOСтрокаПрайс);

	КонецЦикла;
	
	Возврат XDTOПрайс;
	
КонецФункции

Функция newOrder(order, clientCode)
	НовЗаказ = Документы.ЗаказПокупателя.СоздатьДокумент();
	
	НовЗаказ.Дата = ТекущаяДата();
	НовЗаказ.Контрагент = Справочники.Контрагенты.НайтиПоКоду(clientCode); 
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовЗаказ,
			глЗначениеПеременной("глТекущийПользователь"), 
			глЗначениеПеременной("ВалютаРегламентированногоУчета"), 
			"Продажа", 
			, 
			, 
			ЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораЗаказаПокупателя());
	НовЗаказ.ДатаОтгрузки = неопределено;

	СтруктураПодбора = Новый Структура();
	СтруктураПодбора.Вставить("Команда", "ПодборВТабличнуюЧастьТовары");
	СтруктураПодбора.Вставить("ВалютаЦены", НовЗаказ.ВалютаДокумента);
	СтруктураПодбора.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());	
	//СтруктураПодбора.Вставить("Серия", Серия);
	СтруктураПодбора.Вставить("Качество", Справочники.Качество.Новый);
	СтруктураПодбора.Вставить("Склад", НовЗаказ.СкладГруппа);
	//СтруктураПодбора.Вставить("Лимит", Лимит);
	СтруктураПодбора.Вставить("СпособЗаполненияЦен", Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	//СтруктураПодбора.Вставить("ЗапрашиватьЦену",          ЗапрашиватьЦену);
	//СтруктураПодбора.Вставить("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти);

	Для Каждого Товар Из order.OrderItem Цикл   //Заполнение табличной части
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Товар.code);
		Количество = Товар.count;
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура, ,НовЗаказ.ТипЦен);
		
		СтруктураПодбора.Вставить("Номенклатура", Номенклатура);
		СтруктураПодбора.Вставить("Количество", Количество);
		СтруктураПодбора.Вставить("Производитель", Номенклатура.Производитель);
		СтруктураПодбора.Вставить("Срок", Номенклатура.Срок);
		СтруктураПодбора.Вставить("ЕдиницаИзмерения", Номенклатура.ЕдиницаХраненияОстатков);
		СтруктураПодбора.Вставить("Цена", Цена);
		
		НовЗаказ.ЗаполнитьТабличнуюЧастьИзПодбора(НовЗаказ.Товары, СтруктураПодбора);
	КонецЦикла; 
	НовЗаказ.Комментарий = "Заказ через интернет";
	НовЗаказ.Записать();//(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	return НовЗаказ.Номер;
КонецФункции
